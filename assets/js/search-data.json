{
  
    
        "post0": {
            "title": "Feature engineering",
            "content": "Loading data . We will use famous Titanic dataset. We will use pandas to read csv file. If your dataset is large and cannot fit to your RAM, it is advisable to use spark. . titanic = pd.read_csv(&#39;data/titanic.csv&#39;) titanic.head() . . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . Variable Defination Key . survival | Survival | 0 = No, 1 = Yes | . pclass | Ticket class | 1 = 1st, 2 = 2nd, 3 = 3rd | . sex | Sex | | . Age | Age in years | | . sibsp | # of siblings / spouses aboard the Titanic | | . parch | # of parents / children aboard the Titanic | | . ticket | Ticket number | | . fare | Passenger fare | | . cabin | Cabin number | | . embarked | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton | . print(f&quot;Titanic dataset has {titanic.shape[0]} entries and {titanic.shape[1]} features.&quot;) . . Titanic dataset has 891 entries and 12 features. . Data Exploration . Continuous features . If we drop all categorical variables, it will look like below (Categirocal features are important but for now we will explore continuous features): . cat_feat = [&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;, &#39;Sex&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;] titanic.drop(cat_feat, axis=1, inplace=True) titanic.head() . . Survived Pclass Age SibSp Parch Fare . 0 0 | 3 | 22.0 | 1 | 0 | 7.2500 | . 1 1 | 1 | 38.0 | 1 | 0 | 71.2833 | . 2 1 | 3 | 26.0 | 0 | 0 | 7.9250 | . 3 1 | 1 | 35.0 | 1 | 0 | 53.1000 | . 4 0 | 3 | 35.0 | 0 | 0 | 8.0500 | . titanic.describe() . . Survived Pclass Age SibSp Parch Fare . count 891.000000 | 891.000000 | 714.000000 | 891.000000 | 891.000000 | 891.000000 | . mean 0.383838 | 2.308642 | 29.699118 | 0.523008 | 0.381594 | 32.204208 | . std 0.486592 | 0.836071 | 14.526497 | 1.102743 | 0.806057 | 49.693429 | . min 0.000000 | 1.000000 | 0.420000 | 0.000000 | 0.000000 | 0.000000 | . 25% 0.000000 | 2.000000 | 20.125000 | 0.000000 | 0.000000 | 7.910400 | . 50% 0.000000 | 3.000000 | 28.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 1.000000 | 3.000000 | 38.000000 | 1.000000 | 0.000000 | 31.000000 | . max 1.000000 | 3.000000 | 80.000000 | 8.000000 | 6.000000 | 512.329200 | . Table above reveals that: . Target variable Survived is binary with mean 0.38 which means 38% of the people survived. Dataset is not highly imbalanced. In case of highly imbalanced dataset one should use oversampling or downsampling technique. | Pclass, SibSp and Parch of descreate nature and have limited values. | Titanic dataset has 819 entries but for age it shows only 714 entries. It means Age feature has 177 missing values . | . Now, let&#39;s explore correlation metrics. Keep in mind negative correlation is equally important as positive correlation. The features used to predict target varible should be less correlated with each other because it can confuse the model as it cannot parse out which feature the signal is comming from. . titanic.corr() . . Survived Pclass Age SibSp Parch Fare . Survived 1.000000 | -0.338481 | -0.077221 | -0.035322 | 0.081629 | 0.257307 | . Pclass -0.338481 | 1.000000 | -0.369226 | 0.083081 | 0.018443 | -0.549500 | . Age -0.077221 | -0.369226 | 1.000000 | -0.308247 | -0.189119 | 0.096067 | . SibSp -0.035322 | 0.083081 | -0.308247 | 1.000000 | 0.414838 | 0.159651 | . Parch 0.081629 | 0.018443 | -0.189119 | 0.414838 | 1.000000 | 0.216225 | . Fare 0.257307 | -0.549500 | 0.096067 | 0.159651 | 0.216225 | 1.000000 | . The target varible Survived has positive correlation with feature Fare. Passengers who bought costly ticket has higher chace of survival. . Fare and Pclass have negative correlation. It means ticket class 1 is the costliest and 3 is the cheapest. . titanic.groupby(&#39;Pclass&#39;)[&#39;Fare&#39;].describe() . . count mean std min 25% 50% 75% max . Pclass . 1 216.0 | 84.154687 | 78.380373 | 0.0 | 30.92395 | 60.2875 | 93.5 | 512.3292 | . 2 184.0 | 20.662183 | 13.417399 | 0.0 | 13.00000 | 14.2500 | 26.0 | 73.5000 | . 3 491.0 | 13.675550 | 11.778142 | 0.0 | 7.75000 | 8.0500 | 15.5 | 69.5500 | . 75 percentile of Pclass-1 &gt; 75 percentile of Pclass-2 75 percentile of Pclass-3 . def describe_count_feature(feature): print(f&quot; n****** Result for {feature} ******&quot;) print(titanic.groupby(&#39;Survived&#39;)[feature].describe() ) ttest(feature) def ttest(feature): survived_feature = titanic[titanic.Survived == 1] [feature] not_survived_feature = titanic[titanic.Survived == 0] [feature] tstat, pval = stats.ttest_ind(survived_feature, not_survived_feature, equal_var=False) print(f&quot;t-statistic: {tstat:.1f}, P-Vale: {pval:.3f}&quot;) for feature in titanic.columns.drop(&#39;Survived&#39;): describe_count_feature(feature) . . ****** Result for Pclass ****** count mean std min 25% 50% 75% max Survived 0 549.0 2.531876 0.735805 1.0 2.0 3.0 3.0 3.0 1 342.0 1.950292 0.863321 1.0 1.0 2.0 3.0 3.0 t-statistic: -10.3, P-Vale: 0.000 ****** Result for Age ****** count mean std min 25% 50% 75% max Survived 0 424.0 30.626179 14.172110 1.00 21.0 28.0 39.0 74.0 1 290.0 28.343690 14.950952 0.42 19.0 28.0 36.0 80.0 t-statistic: nan, P-Vale: nan ****** Result for SibSp ****** count mean std min 25% 50% 75% max Survived 0 549.0 0.553734 1.288399 0.0 0.0 0.0 1.0 8.0 1 342.0 0.473684 0.708688 0.0 0.0 0.0 1.0 4.0 t-statistic: -1.2, P-Vale: 0.233 ****** Result for Parch ****** count mean std min 25% 50% 75% max Survived 0 549.0 0.329690 0.823166 0.0 0.0 0.0 0.0 6.0 1 342.0 0.464912 0.771712 0.0 0.0 0.0 1.0 5.0 t-statistic: 2.5, P-Vale: 0.013 ****** Result for Fare ****** count mean std min 25% 50% 75% max Survived 0 549.0 22.117887 31.388207 0.0 7.8542 10.5 26.0 263.0000 1 342.0 48.395408 66.596998 0.0 12.4750 26.0 57.0 512.3292 t-statistic: 6.8, P-Vale: 0.000 . Interestigly, result for Fare shows that average ticket cost of the survived passangers is higher than the passangers who did not surived. Similar difference can be observed for mean, median and inter quantile ranges. . Average age of the survived passenger ➡️ 30.63 years Average age of the non-survived passenger ➡️ 28.34 years However, 50 percentile for survived and not survived is the same. . We saw above that Age has 177 missing value. It is important to understand if the age is missing for certain group of people OR it is missing in systematic fasion. This will decide how we will handle the missing value. . print(titanic.groupby(titanic.Age.isnull()).mean()) print(&#39;--&#39;) print(&quot;⬆️ True indicates missing value.&quot;) . . Survived Pclass Age SibSp Parch Fare Age False 0.406162 2.236695 29.699118 0.512605 0.431373 34.694514 True 0.293785 2.598870 NaN 0.564972 0.180791 22.158567 -- ⬆️ True indicates missing value. . People without age reported are less likely to be survived, fewer parents/children, slightly higher class number and less fare. . Visualize continuous features . Next, Let&#39;s plot the data to understand the distribution and the target variable. . fig, axs = plt.subplots(ncols=2, figsize=(16,9)) axs_no = 0 for feature in [&#39;Age&#39;, &#39;Fare&#39;]: died = list(titanic[titanic.Survived == 0][feature].dropna()) survived = list(titanic[titanic.Survived == 1][feature].dropna()) xmin = min(min(died), min(survived)) xmax = max( max(died), max(survived) ) width = (xmax - xmin) / 40 sns.histplot(died, color=&#39;r&#39;, kde=False, bins=np.arange(xmin, xmax, width), ax=axs[axs_no]) sns.histplot(survived, color=&#39;g&#39;, kde=False, bins=np.arange(xmin, xmax, width), ax=axs[axs_no]) axs[axs_no].set_title(f&quot;Figure 1.{axs_no+1}: Histogram for {feature}&quot;) axs[axs_no].legend([&#39;Did not survived&#39;, &#39;Survived&#39;]) axs_no += 1 . . Previously, by observing averages and 50 percitles, We saw almost no difference between who survived and who did not. The histogram of age distribution above confirms that (Figure 1.1). . For Fare we saw drastic difference between means: . Mean Fare for people who survived ➡️ ~48 | Mean Fare people who did not survived ➡️ ~22 | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; The overlaid histogram (Figure 1.2) highlights the caution you have to take with looking only at averages instead of full distribution. Except first bin of the histogram for Fare, the likelihood of surviving versus not surviving is very similar. For example in case of the second bin, we can observe ~105 for people who did not survivde and ~70 for people who survivde. . The histogram for Fare (Figure 1.2) shows the small difference between two distribution unlike we observed by comparing mean values. The big difference between mean values is impected by some outliers. . fig, axs = plt.subplots(ncols=3, figsize=(30,9)) axs_no = 0 ordinal_features = [&#39;Pclass&#39;, &#39;SibSp&#39;, &#39;Parch&#39;] for feature in ordinal_features: sns.pointplot(x=feature, y=&#39;Survived&#39;, data=titanic, ax=axs[axs_no]) axs[axs_no].set_title(f&quot;Figure 2.{axs_no+1}: Input feature --&gt; &#39;{feature}&#39; &quot;) axs_no += 1 plt.ylim(0,1) . . Figure 2.x shows the percentage of people survived at each level of the input feature. The verticle lines represent the confidence level. Input with limited examples will reseult into bigger line and represent less confidence. . Figure 2.1 depicts that first class passengers (Pclass=1) are the most likely to survive (around 64% probability) and third class passengers are the least likely to survive. Here, we can see the clear trend. . Likelihood of first class passenger survive &gt; Likelihood of second class passenger survive &gt; Likelihood of third class passenger survive . Figure 2.2 and figure 2.3 shows that as number of family mamber increases the likelyhood of survining is reduced. Both plots almost similar trend therefore we can combine these two feature and reduce redandency. We have combined features SibSp and Parch and added new feature called family_members. . family members = (number of siblings / spouses aboard the Titanic) + (number of parents / children aboard the Titanic) . $family _member = SibSp + Parch$ . We will decide later whether we should use reduced feature (family_members) OR use two separate features. . titanic[&#39;family_members&#39;] = titanic[&#39;SibSp&#39;] + titanic[&#39;Parch&#39;] sns.pointplot(x=&#39;family_members&#39;, y=&#39;Survived&#39;, data=titanic) plt.title(f&quot;Figure 3: Total family members (SibSp + Parch)&quot;) plt.show() . . We can observe from figure 3 that the probability of surving increase till three family_members and after that we are observing sudden drop in the values. It is worth further investigating this plot for better undestanding. . Categirocal features . Now, Let&#39;s explore the categorical fatures and drop continuous features and consider categorical features. . titanic = pd.read_csv(&#39;data/titanic.csv&#39;) continuous_features = [&#39;Pclass&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Fare&#39;, &#39;Age&#39;, &#39;PassengerId&#39;] titanic.drop(columns=continuous_features, axis=1, inplace=True) categorical_features = list(titanic.columns) titanic.head() . . Survived Name Sex Ticket Cabin Embarked . 0 0 | Braund, Mr. Owen Harris | male | A/5 21171 | NaN | S | . 1 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | PC 17599 | C85 | C | . 2 1 | Heikkinen, Miss. Laina | female | STON/O2. 3101282 | NaN | S | . 3 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 113803 | C123 | S | . 4 0 | Allen, Mr. William Henry | male | 373450 | NaN | S | . print(&quot;⬇️ Total NaN values for each categorical feature.&quot;) print(titanic.isnull().sum()) . . ⬇️ Total NaN values for each categorical feature. Survived 0 Name 0 Sex 0 Ticket 0 Cabin 687 Embarked 2 dtype: int64 . For the cabin feature we have 687 NaN values (out of 891 entries). At first glace this feature does not look useful for the prediction. Let&#39;s further investigate this feature for better understanding. . print(titanic.groupby(titanic.Cabin.isnull()).mean()) print(&quot;⬆️ True indicates the missing value.&quot;) . . Survived Cabin False 0.666667 True 0.299854 ⬆️ True indicates the missing value. . &lt;/div&gt; .",
            "url": "https://pandya6988.github.io/my_first_fastpage/fastpages/feature%20engineering/machine%20learning/2022/09/11/feature_engineering.html",
            "relUrl": "/fastpages/feature%20engineering/machine%20learning/2022/09/11/feature_engineering.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pandya6988.github.io/my_first_fastpage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pandya6988.github.io/my_first_fastpage/jupyter/2020/02/20/test-copy.html",
            "relUrl": "/jupyter/2020/02/20/test-copy.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pandya6988.github.io/my_first_fastpage/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pandya6988.github.io/my_first_fastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pandya6988.github.io/my_first_fastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}